1.先了解返回函数
即.将函数作为结果值返回
e g.
def cal_sum(*args):
	def sum():
		ax=0
		for n in args:
			ax+=n
		return ax
	return sum
f=cal_sum(1,3,5,7,9)
f()
>>>25
在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。

2.再学习闭包概念与应用
注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。

eg.
def count():
	fs=[]
	for i in range(1,4):
		def f():
			return i*i
		fs.append(f)
	return fs
f1,f2,f3 = count()
>>> f1()
9
>>> f2()
9
>>> f3()
9
全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。

注：返回闭包时牢记一点，返回函数时不要引用任何循环变量，或者后续会发生变化的量！
但是，如果我很倔强，一定要用呢！
来来来，再来一个函数！用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到参数的值不变！


eg.

def count():
	def f(j):
		def g():
			return j*j
		return g
		
	
	fs=[]
	for i in range(1,4):
		fs.append(f(i))
	return fs

>>> f1, f2, f3 = count()
>>> f1()
1
>>> f2()
4
>>> f3()
9
WIN！
3.利用nonlocal避免一些问题
使用闭包，就是内层函数引用了外层函数的局部变量。如果只是读外层变量的值，我们会发现返回的闭包函数调用一切正常：
def inc():
	x=0
	def fn():
		#仅读取x的值 return的不算！
		return x+1
        return fn
f=inc()
print(f())
print(f())
>>>1
>>>1

但是！
如果对外层变量赋值，由于Python 解释器会把x当作函数fn()的局部变量，它会报错：
def inc():
    x = 0
    def fn():
        x = x + 1
        return x
    return fn

f = inc()
print(f()) # 1
print(f()) # 2
>>>UnboundLocalError: cannot access local variable 'x' where it is not associated with a value
怎么办？告诉它这个就是我的！即，宣誓主权！
def inc():
    x = 0
    def fn():
	nonlocal x
        x = x + 1
        return x
    return fn

f = inc()
print(f()) # 1
print(f()) # 2
>>>1
>>>2
练习: 利用闭包返回一个计数器函数，每次调用它返回递增函数：
def createCounter():
	count=0
	def counter():
		nonlocal count
		count+=1
		return count
	return counter
counterA = createCounter()
print(counterA(), counterA(), counterA(), counterA(), counterA()) 
>>>1
>>>2
>>>3
>>>4
>>>5
为什么会累积？因为，nolocal使其成为一个全局变量，也会改变！
4.匿名函数lambda
eg.
以map()函数为例，计算f(x)=x**2时，除了定义一个f(x)的函数外，还可以直接传入匿名函数！

list(map(lambda x:x*x,[1,2,3,4,5,6]))
>>>[1,4,6,16,25,36]
此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：
f=lambda x:x*x
f(5)
>>>25
同样，也可以把匿名函数作为返回值返回，比如：
def build(x,y):
	return lambda: x * x + y * y

5.装饰器

















































