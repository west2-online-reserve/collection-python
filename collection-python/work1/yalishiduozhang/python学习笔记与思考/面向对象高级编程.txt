面向对象高级编程
1.使用__slots__
先定义class
class Student(object)：
	pass
再尝试给实例绑定一个属性：
s=Student()
s.name='Michael'
print(s.name)
>>>Michael

还可以给实例绑定一个方法：

def set_age(self,age):#定义一个函数作为实例方法
	self.age=age
from types import MethodType
s.set_age=MethodType(set_age,s)#给实例绑定一个方法
s.set_age(25)#调用实例方法
s.age
>>>25

但是！给一个实例绑定的方法，对另一个实例是不起作用的！
>>> s2 = Student() # 创建新的实例
>>> s2.set_age(25) # 尝试调用方法
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'set_age'

为了给所有实例都绑定方法，可以给class绑定方法：
def set_score(self,score):
	self.score = score
Student.set_score = set_score

给class绑定方法后，所有实例均可调用：

s.set_score(10)
s.score
>>>100

但是！如果我们想要限制实例属性怎么办？比如，只允许对Student实例添加name和age属性。
为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性：
class Student(object):
	__slots__=('name','age')


然后，我们试试：

>>> s = Student() # 创建新的实例
>>> s.name = 'Michael' # 绑定属性'name'
>>> s.age = 25 # 绑定属性'age'
>>> s.score = 99 # 绑定属性'score'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'score'

由于'score'没有被放到__slots__中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。

使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：

class GraduateStudent(Student):
	pass
g = GraduateStudent()
g.score=999

仍然可以！

2.使用@property
绑定属性时，若把属性暴露出去，写起来简单，但是没法检查，导致成绩随便更改：
s = Student()
s.score=999
这个不就很离谱吗！
可以通过一个set_score()和get_score()分别来设置和获取成绩，如下：
class Student(object):
	def get_score(self):
		return self._score
	def set_score(self,value):
		if not isinstance(value,int):
			raise ValueError('score must be an integer !')
		if value < 0 and value > 100 :
			raise ValueError('score must between 0~100 !')
		self._score=value
现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：

>>> s = Student()
>>> s.set_score(60) # ok!
>>> s.get_score()
60
>>> s.set_score(9999)
Traceback (most recent call last):
  ...
ValueError: score must between 0 ~ 100!

但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。

有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！

还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的@property装饰器就是负责把一个方法变成属性调用的：


class Student(object):
	@property
	def score(self):
		return self._score
	@score.setter
	def score(self,value):
		if not isinstance(value,int):
			  raise ValueError('score must be an integer!')
        	if value < 0 or value > 100:
            		  raise ValueError('score must between 0 ~ 100!')
                self._score = value

@property 的实现比较复杂。我们深入考察：

把一个getter方法变成属性，只需要加上@property就可以了，此时，@property
本身又创建了另一个装饰器 @score.setter,负责把setter方法变成属性赋值，于是我们就拥有一个可控的属性操作：

s = Student()
s.score = 60
s.score
>>>60
s.score = 999
>>>Traceback (most recent call last):
  ...
ValueError: score must between 0 ~ 100!

注意到这个神奇的@property ，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。
还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：
class Student(object):
	@property
	def birth(self):
		return self._birth
	
	@birth.setter
	def birth(self,value):
		self._birth = value

	@property
	def age(self):
		return 2015 - self.birth

上面的birth是可读属性，而age就是一个只读属性，因为age可以根据birth和当前时间计算出来。

要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：

class Student(object):

    # 方法名称和实例变量均为birth:
    @property
    def birth(self):
        return self.birth
这是因为调用s.birth时，首先转换为方法调用，在执行return self.birth时，又视为访问self的属性，于是又转换为方法调用，造成无限递归，最终导致栈溢出报错RecursionError。
@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。


实践！
请利用@property给一个Screen对象加上width和height属性，以及一个只读属性resolution：

# -*- coding: utf-8 -*-
class Screen(object):
	@property
	def width(self):
		return self._width
	@width.setter
	def width(self,value):
		self._width=value
	@property
	def height():
		return self._height
	@height.setter
	def height(self,value):
		self._height = value
	@property
	def resolution(self):
		return self.width * self.height
s = Screen()
s.width = 1024
s.height = 768
print('resolution =', s.resolution)
if s.resolution == 786432:
    print('测试通过!')
else:
    print('测试失败!')

>>>测试通过！ 


3.多重继承
采用多重继承可以使层次分明：

eg.
class Animal(object):
	pass
#大类
class Mammal(Animal)：
	pass
class Bird(Animal):
	pass
#各种动物
class Dog(Mammal):
	pass
class Bat(Mammal):
	pass

class Parrot(Bird):
	pass

class Ostrich(Bird):
	pass

现在，我们要给动物再加上Runnable 和 Flyable的功能，只需要定义好它们的类：

class Runnable(object):
	def run(self):
		print('Running...')
class Flyable(object):
	def fly(self):
		print('Flying...')
对于一个需要Runnable的动物，就多继承一个Runnable，例如Dog：

class Dog(Mammal,Runnable):
	pass
对于需要Flyable功能的动物，就多继承一个Flyable，例如Bat：

class Bat(Mammal, Flyable):
    pass
通过多重继承，一个子类就可以同时获得多个父类的所有功能。

在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。

为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。类似的，你还可以定义出肉食动物CarnivorousMixIn和植食动物HerbivoresMixIn，让某个动物同时拥有好几个MixIn：

class Dog(Mammal,RunnableMixIin,CarnivorousMixLin):
	pass
MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。

Python自带的很多库也使用了MixIn。举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务来。

比如，编写一个多进程模式的TCP服务，定义如下：

class MyTCPServer(TCPServer, ForkingMixIn):
    pass
编写一个多线程模式的UDP服务，定义如下：

class MyUDPServer(UDPServer, ThreadingMixIn):
    pass
如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixIn：

class MyTCPServer(TCPServer, CoroutineMixIn):
    pass
这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。

注意：
只允许单一继承的语言（如Java）不能使用MixIn的设计！























































































































