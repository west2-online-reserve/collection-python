1.高阶函数
把函数名当成变量使用！
eg.
def add(x,y,f):
	return f(x) + f(y)

add(-3,4,abs)
>>>7
补充：Iterable 可迭代对象
      Iterator 迭代器
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
2.map 
初用法：
def f(x):
	return x*x
r=map(f,[1,2,3])
list(r)
>>>[1,4,9]
map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。

也可以直接使用list：
list(map(str,[1,2,3,4,5]))
>>>['1','2','3','4','5']

3.reduce
reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

eg1.利用reduce实现序列求和
from functools import reduce
def add(x,y):
	return x + y
reduce(add,[1,5,8])
>>>14

56 ->94
76->88
eg2.序列转换为整数
from functools import reduce
def fn(x,y):
	return x*10 + y
reduce(fn,[1,3,5,4])
>>>1354

eg3.利用map与reduce 把str 转换为 int
from functools import reduce
def  stoi(st):
	dict={'0':0,'1':1,'2':2,'3':3,'4':4,'5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
	return dict[st]
def  fn(x,y):
	return x*10+y

reduce(fn,map(stoi,'13579'))
>>>13579	
	


















