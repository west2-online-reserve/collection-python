一.实例属性和类属性
1.实例属性
给实例绑定属性的方法是通过实例变量，或者通过self变量：
class Student(object):
	def __init__(self,name):
		self.name=name
s=Student('Bob')	
s.score=90

2.类属性
可以直接在class中定义属性，归Student类所有：
class Student(object):
	name='Student'
s=Student() #创建实例s
print(s.name)#打印实例name属性，但由于没有，继续查找class（类）的属性
>>>Student
print(Student.name)#打印类的name属性
>>>Student
s.name='Michael'#给实例绑定name属性
print(s.name)#由于实例属性优先级高于类属性，它会屏蔽掉类的name属性
>>>Michael
print(Student.name)#类属性未消失，仍可访问
>>>Student
del s.name #删除实例的name属性
print(s.name)再次调用，未找到实例属性，故返回类属性
>>>Student

从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。

eg.
为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加：
class Student(object):
	count = 0
	def __init__(self,name):
		self.name = name
		Student.count+=1
# 测试:
if Student.count != 0:
    print('测试失败!')
else:
    bart = Student('Bart')
    if Student.count != 1:
        print('测试失败!')
    else:
        lisa = Student('Bart')
        if Student.count != 2:
            print('测试失败!')
        else:
            print('Students:', Student.count)
            print('测试通过!')
>>>Bart 2
>>>测试通过！











